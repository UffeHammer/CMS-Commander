//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace SitecoreConverter.Core.Sitecore5x {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Visual Sitecore ServiceSoap", Namespace="http://sitecore.net/visual/")]
    public partial class VisualSitecoreService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddFromMasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFromTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyToOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteChildrenOperationCompleted;
        
        private System.Threading.SendOrPostCallback DuplicateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildrenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDatabasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemMastersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMastersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveToOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyCredentialsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VisualSitecoreService() {
            this.Url = global::SitecoreConverter.Core.Properties.Settings.Default.Core_Sitecore5x_Visual_x0020_Sitecore_x0020_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddFromMasterCompletedEventHandler AddFromMasterCompleted;
        
        /// <remarks/>
        public event AddFromTemplateCompletedEventHandler AddFromTemplateCompleted;
        
        /// <remarks/>
        public event AddVersionCompletedEventHandler AddVersionCompleted;
        
        /// <remarks/>
        public event CopyToCompletedEventHandler CopyToCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event DeleteChildrenCompletedEventHandler DeleteChildrenCompleted;
        
        /// <remarks/>
        public event DuplicateCompletedEventHandler DuplicateCompleted;
        
        /// <remarks/>
        public event GetChildrenCompletedEventHandler GetChildrenCompleted;
        
        /// <remarks/>
        public event GetDatabasesCompletedEventHandler GetDatabasesCompleted;
        
        /// <remarks/>
        public event GetItemMastersCompletedEventHandler GetItemMastersCompleted;
        
        /// <remarks/>
        public event GetItemFieldsCompletedEventHandler GetItemFieldsCompleted;
        
        /// <remarks/>
        public event GetLanguagesCompletedEventHandler GetLanguagesCompleted;
        
        /// <remarks/>
        public event GetMastersCompletedEventHandler GetMastersCompleted;
        
        /// <remarks/>
        public event GetTemplatesCompletedEventHandler GetTemplatesCompleted;
        
        /// <remarks/>
        public event GetXMLCompletedEventHandler GetXMLCompleted;
        
        /// <remarks/>
        public event InsertXMLCompletedEventHandler InsertXMLCompleted;
        
        /// <remarks/>
        public event MoveToCompletedEventHandler MoveToCompleted;
        
        /// <remarks/>
        public event RemoveVersionCompletedEventHandler RemoveVersionCompleted;
        
        /// <remarks/>
        public event RenameCompletedEventHandler RenameCompleted;
        
        /// <remarks/>
        public event SaveCompletedEventHandler SaveCompleted;
        
        /// <remarks/>
        public event VerifyCredentialsCompletedEventHandler VerifyCredentialsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/AddFromMaster", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddFromMaster(string id, string masterID, string name, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("AddFromMaster", new object[] {
                        id,
                        masterID,
                        name,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddFromMasterAsync(string id, string masterID, string name, string databaseName, Credentials credentials) {
            this.AddFromMasterAsync(id, masterID, name, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void AddFromMasterAsync(string id, string masterID, string name, string databaseName, Credentials credentials, object userState) {
            if ((this.AddFromMasterOperationCompleted == null)) {
                this.AddFromMasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFromMasterOperationCompleted);
            }
            this.InvokeAsync("AddFromMaster", new object[] {
                        id,
                        masterID,
                        name,
                        databaseName,
                        credentials}, this.AddFromMasterOperationCompleted, userState);
        }
        
        private void OnAddFromMasterOperationCompleted(object arg) {
            if ((this.AddFromMasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFromMasterCompleted(this, new AddFromMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/AddFromTemplate", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddFromTemplate(string id, string templateID, string name, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("AddFromTemplate", new object[] {
                        id,
                        templateID,
                        name,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddFromTemplateAsync(string id, string templateID, string name, string databaseName, Credentials credentials) {
            this.AddFromTemplateAsync(id, templateID, name, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void AddFromTemplateAsync(string id, string templateID, string name, string databaseName, Credentials credentials, object userState) {
            if ((this.AddFromTemplateOperationCompleted == null)) {
                this.AddFromTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFromTemplateOperationCompleted);
            }
            this.InvokeAsync("AddFromTemplate", new object[] {
                        id,
                        templateID,
                        name,
                        databaseName,
                        credentials}, this.AddFromTemplateOperationCompleted, userState);
        }
        
        private void OnAddFromTemplateOperationCompleted(object arg) {
            if ((this.AddFromTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFromTemplateCompleted(this, new AddFromTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/AddVersion", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddVersion(string id, string language, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("AddVersion", new object[] {
                        id,
                        language,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddVersionAsync(string id, string language, string databaseName, Credentials credentials) {
            this.AddVersionAsync(id, language, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void AddVersionAsync(string id, string language, string databaseName, Credentials credentials, object userState) {
            if ((this.AddVersionOperationCompleted == null)) {
                this.AddVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVersionOperationCompleted);
            }
            this.InvokeAsync("AddVersion", new object[] {
                        id,
                        language,
                        databaseName,
                        credentials}, this.AddVersionOperationCompleted, userState);
        }
        
        private void OnAddVersionOperationCompleted(object arg) {
            if ((this.AddVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVersionCompleted(this, new AddVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/CopyTo", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CopyTo(string id, string newParent, string name, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("CopyTo", new object[] {
                        id,
                        newParent,
                        name,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CopyToAsync(string id, string newParent, string name, string databaseName, Credentials credentials) {
            this.CopyToAsync(id, newParent, name, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void CopyToAsync(string id, string newParent, string name, string databaseName, Credentials credentials, object userState) {
            if ((this.CopyToOperationCompleted == null)) {
                this.CopyToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyToOperationCompleted);
            }
            this.InvokeAsync("CopyTo", new object[] {
                        id,
                        newParent,
                        name,
                        databaseName,
                        credentials}, this.CopyToOperationCompleted, userState);
        }
        
        private void OnCopyToOperationCompleted(object arg) {
            if ((this.CopyToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyToCompleted(this, new CopyToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/Delete", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Delete(string id, bool recycle, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("Delete", new object[] {
                        id,
                        recycle,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(string id, bool recycle, string databaseName, Credentials credentials) {
            this.DeleteAsync(id, recycle, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(string id, bool recycle, string databaseName, Credentials credentials, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        id,
                        recycle,
                        databaseName,
                        credentials}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/DeleteChildren", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteChildren(string id, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("DeleteChildren", new object[] {
                        id,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteChildrenAsync(string id, string databaseName, Credentials credentials) {
            this.DeleteChildrenAsync(id, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void DeleteChildrenAsync(string id, string databaseName, Credentials credentials, object userState) {
            if ((this.DeleteChildrenOperationCompleted == null)) {
                this.DeleteChildrenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteChildrenOperationCompleted);
            }
            this.InvokeAsync("DeleteChildren", new object[] {
                        id,
                        databaseName,
                        credentials}, this.DeleteChildrenOperationCompleted, userState);
        }
        
        private void OnDeleteChildrenOperationCompleted(object arg) {
            if ((this.DeleteChildrenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteChildrenCompleted(this, new DeleteChildrenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/Duplicate", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Duplicate(string id, string name, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("Duplicate", new object[] {
                        id,
                        name,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DuplicateAsync(string id, string name, string databaseName, Credentials credentials) {
            this.DuplicateAsync(id, name, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void DuplicateAsync(string id, string name, string databaseName, Credentials credentials, object userState) {
            if ((this.DuplicateOperationCompleted == null)) {
                this.DuplicateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDuplicateOperationCompleted);
            }
            this.InvokeAsync("Duplicate", new object[] {
                        id,
                        name,
                        databaseName,
                        credentials}, this.DuplicateOperationCompleted, userState);
        }
        
        private void OnDuplicateOperationCompleted(object arg) {
            if ((this.DuplicateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DuplicateCompleted(this, new DuplicateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetChildren", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetChildren(string id, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetChildren", new object[] {
                        id,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetChildrenAsync(string id, string databaseName, Credentials credentials) {
            this.GetChildrenAsync(id, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetChildrenAsync(string id, string databaseName, Credentials credentials, object userState) {
            if ((this.GetChildrenOperationCompleted == null)) {
                this.GetChildrenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildrenOperationCompleted);
            }
            this.InvokeAsync("GetChildren", new object[] {
                        id,
                        databaseName,
                        credentials}, this.GetChildrenOperationCompleted, userState);
        }
        
        private void OnGetChildrenOperationCompleted(object arg) {
            if ((this.GetChildrenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildrenCompleted(this, new GetChildrenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetDatabases", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDatabases(Credentials credentials) {
            object[] results = this.Invoke("GetDatabases", new object[] {
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDatabasesAsync(Credentials credentials) {
            this.GetDatabasesAsync(credentials, null);
        }
        
        /// <remarks/>
        public void GetDatabasesAsync(Credentials credentials, object userState) {
            if ((this.GetDatabasesOperationCompleted == null)) {
                this.GetDatabasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDatabasesOperationCompleted);
            }
            this.InvokeAsync("GetDatabases", new object[] {
                        credentials}, this.GetDatabasesOperationCompleted, userState);
        }
        
        private void OnGetDatabasesOperationCompleted(object arg) {
            if ((this.GetDatabasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDatabasesCompleted(this, new GetDatabasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetItemMasters", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetItemMasters(string id, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetItemMasters", new object[] {
                        id,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemMastersAsync(string id, string databaseName, Credentials credentials) {
            this.GetItemMastersAsync(id, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetItemMastersAsync(string id, string databaseName, Credentials credentials, object userState) {
            if ((this.GetItemMastersOperationCompleted == null)) {
                this.GetItemMastersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemMastersOperationCompleted);
            }
            this.InvokeAsync("GetItemMasters", new object[] {
                        id,
                        databaseName,
                        credentials}, this.GetItemMastersOperationCompleted, userState);
        }
        
        private void OnGetItemMastersOperationCompleted(object arg) {
            if ((this.GetItemMastersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemMastersCompleted(this, new GetItemMastersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetItemFields", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetItemFields(string id, string language, string version, bool allFields, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetItemFields", new object[] {
                        id,
                        language,
                        version,
                        allFields,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemFieldsAsync(string id, string language, string version, bool allFields, string databaseName, Credentials credentials) {
            this.GetItemFieldsAsync(id, language, version, allFields, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetItemFieldsAsync(string id, string language, string version, bool allFields, string databaseName, Credentials credentials, object userState) {
            if ((this.GetItemFieldsOperationCompleted == null)) {
                this.GetItemFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemFieldsOperationCompleted);
            }
            this.InvokeAsync("GetItemFields", new object[] {
                        id,
                        language,
                        version,
                        allFields,
                        databaseName,
                        credentials}, this.GetItemFieldsOperationCompleted, userState);
        }
        
        private void OnGetItemFieldsOperationCompleted(object arg) {
            if ((this.GetItemFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemFieldsCompleted(this, new GetItemFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetLanguages", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLanguages(string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetLanguages", new object[] {
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLanguagesAsync(string databaseName, Credentials credentials) {
            this.GetLanguagesAsync(databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetLanguagesAsync(string databaseName, Credentials credentials, object userState) {
            if ((this.GetLanguagesOperationCompleted == null)) {
                this.GetLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetLanguages", new object[] {
                        databaseName,
                        credentials}, this.GetLanguagesOperationCompleted, userState);
        }
        
        private void OnGetLanguagesOperationCompleted(object arg) {
            if ((this.GetLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLanguagesCompleted(this, new GetLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetMasters", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMasters(string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetMasters", new object[] {
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMastersAsync(string databaseName, Credentials credentials) {
            this.GetMastersAsync(databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetMastersAsync(string databaseName, Credentials credentials, object userState) {
            if ((this.GetMastersOperationCompleted == null)) {
                this.GetMastersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMastersOperationCompleted);
            }
            this.InvokeAsync("GetMasters", new object[] {
                        databaseName,
                        credentials}, this.GetMastersOperationCompleted, userState);
        }
        
        private void OnGetMastersOperationCompleted(object arg) {
            if ((this.GetMastersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMastersCompleted(this, new GetMastersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetTemplates", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetTemplates(string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetTemplates", new object[] {
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplatesAsync(string databaseName, Credentials credentials) {
            this.GetTemplatesAsync(databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetTemplatesAsync(string databaseName, Credentials credentials, object userState) {
            if ((this.GetTemplatesOperationCompleted == null)) {
                this.GetTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetTemplates", new object[] {
                        databaseName,
                        credentials}, this.GetTemplatesOperationCompleted, userState);
        }
        
        private void OnGetTemplatesOperationCompleted(object arg) {
            if ((this.GetTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplatesCompleted(this, new GetTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/GetXML", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetXML(string id, bool deep, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("GetXML", new object[] {
                        id,
                        deep,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLAsync(string id, bool deep, string databaseName, Credentials credentials) {
            this.GetXMLAsync(id, deep, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void GetXMLAsync(string id, bool deep, string databaseName, Credentials credentials, object userState) {
            if ((this.GetXMLOperationCompleted == null)) {
                this.GetXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLOperationCompleted);
            }
            this.InvokeAsync("GetXML", new object[] {
                        id,
                        deep,
                        databaseName,
                        credentials}, this.GetXMLOperationCompleted, userState);
        }
        
        private void OnGetXMLOperationCompleted(object arg) {
            if ((this.GetXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLCompleted(this, new GetXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/InsertXML", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode InsertXML(string id, string xml, bool changeIDs, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("InsertXML", new object[] {
                        id,
                        xml,
                        changeIDs,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void InsertXMLAsync(string id, string xml, bool changeIDs, string databaseName, Credentials credentials) {
            this.InsertXMLAsync(id, xml, changeIDs, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void InsertXMLAsync(string id, string xml, bool changeIDs, string databaseName, Credentials credentials, object userState) {
            if ((this.InsertXMLOperationCompleted == null)) {
                this.InsertXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertXMLOperationCompleted);
            }
            this.InvokeAsync("InsertXML", new object[] {
                        id,
                        xml,
                        changeIDs,
                        databaseName,
                        credentials}, this.InsertXMLOperationCompleted, userState);
        }
        
        private void OnInsertXMLOperationCompleted(object arg) {
            if ((this.InsertXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertXMLCompleted(this, new InsertXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/MoveTo", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode MoveTo(string id, string newParent, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("MoveTo", new object[] {
                        id,
                        newParent,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void MoveToAsync(string id, string newParent, string databaseName, Credentials credentials) {
            this.MoveToAsync(id, newParent, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void MoveToAsync(string id, string newParent, string databaseName, Credentials credentials, object userState) {
            if ((this.MoveToOperationCompleted == null)) {
                this.MoveToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveToOperationCompleted);
            }
            this.InvokeAsync("MoveTo", new object[] {
                        id,
                        newParent,
                        databaseName,
                        credentials}, this.MoveToOperationCompleted, userState);
        }
        
        private void OnMoveToOperationCompleted(object arg) {
            if ((this.MoveToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveToCompleted(this, new MoveToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/RemoveVersion", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RemoveVersion(string id, string language, string version, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("RemoveVersion", new object[] {
                        id,
                        language,
                        version,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveVersionAsync(string id, string language, string version, string databaseName, Credentials credentials) {
            this.RemoveVersionAsync(id, language, version, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void RemoveVersionAsync(string id, string language, string version, string databaseName, Credentials credentials, object userState) {
            if ((this.RemoveVersionOperationCompleted == null)) {
                this.RemoveVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveVersionOperationCompleted);
            }
            this.InvokeAsync("RemoveVersion", new object[] {
                        id,
                        language,
                        version,
                        databaseName,
                        credentials}, this.RemoveVersionOperationCompleted, userState);
        }
        
        private void OnRemoveVersionOperationCompleted(object arg) {
            if ((this.RemoveVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveVersionCompleted(this, new RemoveVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/Rename", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Rename(string id, string newName, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("Rename", new object[] {
                        id,
                        newName,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RenameAsync(string id, string newName, string databaseName, Credentials credentials) {
            this.RenameAsync(id, newName, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void RenameAsync(string id, string newName, string databaseName, Credentials credentials, object userState) {
            if ((this.RenameOperationCompleted == null)) {
                this.RenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameOperationCompleted);
            }
            this.InvokeAsync("Rename", new object[] {
                        id,
                        newName,
                        databaseName,
                        credentials}, this.RenameOperationCompleted, userState);
        }
        
        private void OnRenameOperationCompleted(object arg) {
            if ((this.RenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCompleted(this, new RenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/Save", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Save(string xml, string databaseName, Credentials credentials) {
            object[] results = this.Invoke("Save", new object[] {
                        xml,
                        databaseName,
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SaveAsync(string xml, string databaseName, Credentials credentials) {
            this.SaveAsync(xml, databaseName, credentials, null);
        }
        
        /// <remarks/>
        public void SaveAsync(string xml, string databaseName, Credentials credentials, object userState) {
            if ((this.SaveOperationCompleted == null)) {
                this.SaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOperationCompleted);
            }
            this.InvokeAsync("Save", new object[] {
                        xml,
                        databaseName,
                        credentials}, this.SaveOperationCompleted, userState);
        }
        
        private void OnSaveOperationCompleted(object arg) {
            if ((this.SaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveCompleted(this, new SaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecore.net/visual/VerifyCredentials", RequestNamespace="http://sitecore.net/visual/", ResponseNamespace="http://sitecore.net/visual/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VerifyCredentials(Credentials credentials) {
            object[] results = this.Invoke("VerifyCredentials", new object[] {
                        credentials});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyCredentialsAsync(Credentials credentials) {
            this.VerifyCredentialsAsync(credentials, null);
        }
        
        /// <remarks/>
        public void VerifyCredentialsAsync(Credentials credentials, object userState) {
            if ((this.VerifyCredentialsOperationCompleted == null)) {
                this.VerifyCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyCredentialsOperationCompleted);
            }
            this.InvokeAsync("VerifyCredentials", new object[] {
                        credentials}, this.VerifyCredentialsOperationCompleted, userState);
        }
        
        private void OnVerifyCredentialsOperationCompleted(object arg) {
            if ((this.VerifyCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyCredentialsCompleted(this, new VerifyCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sitecore.net/visual/")]
    public partial class Credentials {
        
        private string customDataField;
        
        private string passwordField;
        
        private string userNameField;
        
        /// <remarks/>
        public string CustomData {
            get {
                return this.customDataField;
            }
            set {
                this.customDataField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddFromMasterCompletedEventHandler(object sender, AddFromMasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFromMasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFromMasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddFromTemplateCompletedEventHandler(object sender, AddFromTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFromTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFromTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddVersionCompletedEventHandler(object sender, AddVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CopyToCompletedEventHandler(object sender, CopyToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteChildrenCompletedEventHandler(object sender, DeleteChildrenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteChildrenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DuplicateCompletedEventHandler(object sender, DuplicateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DuplicateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DuplicateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetChildrenCompletedEventHandler(object sender, GetChildrenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildrenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDatabasesCompletedEventHandler(object sender, GetDatabasesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDatabasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDatabasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetItemMastersCompletedEventHandler(object sender, GetItemMastersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemMastersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemMastersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetItemFieldsCompletedEventHandler(object sender, GetItemFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLanguagesCompletedEventHandler(object sender, GetLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMastersCompletedEventHandler(object sender, GetMastersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMastersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMastersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTemplatesCompletedEventHandler(object sender, GetTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetXMLCompletedEventHandler(object sender, GetXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertXMLCompletedEventHandler(object sender, InsertXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MoveToCompletedEventHandler(object sender, MoveToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveVersionCompletedEventHandler(object sender, RemoveVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RenameCompletedEventHandler(object sender, RenameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveCompletedEventHandler(object sender, SaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyCredentialsCompletedEventHandler(object sender, VerifyCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591